{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","cityname","weatherIcon","temp_celsius","temp_min","temp_max","description","charAt","toUpperCase","slice","error","role","Form","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","country","target","elements","value","city","fetch","api_call","json","response","setState","sys","main","weather","celsius","calCelsius","temp","get_WeatherIcon","id","console","log","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Math","floor","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e45e4674.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./weather.style.css\";\r\n\r\nconst Weather = props =>{\r\n    return (\r\n        <div className=\"container text-light\">\r\n        <div className=\"Card\">\r\n        <h1 className=\"text-white py-3\">{props.cityname}</h1>\r\n        <h5 className=\"py-4\">\r\n            <i className={`wi ${props.weatherIcon}`}/>\r\n        </h5>\r\n\r\n        {props.temp_celsius ? (\r\n        <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ): null}\r\n\r\n        {/*mostrar max y min temp */}\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n        {/*weather description */}\r\n        <h4 className=\"py-3\">\r\n            {props.description.charAt(0).toUpperCase() +\r\n            props.description.slice(1)}\r\n        </h4>\r\n     </div>\r\n    </div>\r\n    );\r\n};\r\n\r\n\r\nfunction minmaxTemp(min, max){\r\n    if(min && max){\r\n        return(\r\n            <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container h-100\">\r\n            <form onSubmit={props.loadweather}>\r\n            <div>{props.error ? error() : \"\"}</div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"city\"\r\n                    autoComplete=\"off\"\r\n                    placeholder=\"Ciudad\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"country\"\r\n                autoComplete=\"off\"\r\n                placeholder=\"País\"\r\n                />\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 mt-2 text-md-left\">\r\n                    <button className=\"btn btn-light text-secondary\">Obtener Clima</button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst error= props => {\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Por favor Ingrese una Ciudad y un País.\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\nimport \"./App.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./app_component/weather.component\";\nimport Form from './app_component/form.component';\n\n\n//api cayll                api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\n\nconst API_key=\"11cb470b3e42fb61ce2b17af2b62ce33\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    };\n  }\n\n\n  get_WeatherIcon(icons,rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({icon:this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async e =>{\n\n    e.preventDefault();\n\n    const country = e.target.elements.country.value;\n    const city = e.target.elements.city.value;\n\n    if(country && city){\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}&lang=sp`\n        );\n    \n      const response = await api_call.json();\n  \n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n       \n        error: false\n      });\n  \n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\n      console.log(response);\n    }else{\n      this.setState({\n        error:true\n      });\n    }\n  };\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather\n        cityname={this.state.city}\n        country={this.state.country}\n        temp_celsius={this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        />\n    </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}